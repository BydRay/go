#############################
go 老男孩教育Go语言第一期



#############################
why go

day 1
	go 静态编译，不需要在运行时判断变量的类型，强类型语言的优势

	编译要求{要跟在函数后面，不能另起一行，阅读方便

	存在未使用的变量或未使用的包，则编译不通过，减少冗余代码，降低代码维护成本

	内存自动回收，只需要new分配内存，不需要释放

	从语言层面支持并发，并发编程简单



#############################
day 1

搭建开发环境

vs插件安装
	https://www.jianshu.com/p/be432e57acd2

nginx  强调多进程的架构
redis  单进程单线程的架构    服务器就需要多起几个实例

go 静态编译，不需要在运行时判断变量的类型，强类型语言的优势

编译要求{要跟在函数后面，不能另起一行，阅读方便

存在未使用的变量或未使用的包，则编译不通过，减少冗余代码，降低代码维护成本

内存自动回收，只需要new分配内存，不需要释放

从语言层面支持并发，并发编程简单

其他语言要写一个高并发的服务，就必须以维护一个线程池，go不需要，go的线程更轻量化，且go自己维护一个线程池

go 的并发基于CSP（Communicating Sequential Process）模型实现
	CSP理解：多个goroute之间通过channel进行通信，每个goroute都是轻量级高性能的

命令行 gofmt -w file.go   规范化代码，解决缩进、空行什么的

go 可以一个函数返回多个值，c 不可以

包的概念
	1. 和python一样，把相同功能的代码放到一个目录，称之为包
	2. 包可以被其他包引用
	3. main包是用来生成可执行文件，每个程序只有一个main包
	4. 包的主要用途是提高代码的可复用性

go 的编码永远都是utf-8

环境变量GOPATH用于指定我们的开发工作区(workspace),是存放源代码、测试文件、库静态文件、可执行文件的工作区，可以在GOPATH中设置多个工作区

go 开发目录结构
	d:/project/src/go_dev/day1/example1/hello.go
		      /bin/
		      /vender/        // 第三方包
		      /pkg/           // 静态库
	export GOPATH=d:/project/

构建 
	C:\Users\user\Desktop\go\project> go build -o bin/hello.exe dev/day1/hello
	go build 默认到src下面区找，所以go build 输入路径不用在前面加上src
	
go run file.go   类似执行一个脚本获取结果

 


#############################
go day 2 

go 编译，包名未main，有func main()，则编译生成可执程序，否则生成lib库

go 编译性语言，任何执行语句不能放在函数体之外，这是编译型语言和解释性语言的一个重要区别
	var name string
	name = "xxx"
	编译报错，需要写个函数，到函数里面去初始化

包别名
	import(
	    a  "add"
	)
	import(
	    _  "add"       //仅导入这个包，不引用里面的任何一个变量和函数，这么做可以通过编译
	)
 
每个源文件都可以包含一个init函数，这个init函数自动被go运行框架调用。

常量使用const 修饰，代表永远是只读的，不能修改。
	const 只能修饰boolean，number（int相关类型、浮点类型、complex）和string
	const identifier [type] = value，其中type可以省略。
		const a string = "xxx"
		const b = "xxx"    
		const c = 9/3 
		const (
			a string = "xxx"
			b = "xxx"    
			c = 9/3 
		)

var(
	a int      // 默认为0
	b string   // 默认为“”
	c bool     // 默认为false
	d = 8
	e = "hello"   // 没类型也行，默认做类型推导
)
		
值类型：基本数据类型int、float、bool、string以及数组和struct。 值类型的内存通常在栈中分配。
引用类型：指针、slice、map、chan等都是引用类型。  引用类型的内存通常在堆上分配。

栈，如执行到一条函数语句，则先用栈保存传入的参数，然后跳到函数的地址，然后再将参数出栈，go 的栈空间一般是几K
堆  物理内存，需要动态申请，用完要释放，多个线程共用，需要加锁，分配性能没有栈高

变量作用域 块作用域

数字类型，主要有int、int8、int16、int32、int64、uint8、uint16、uint32、uint64、float32、float64
	var a float   // 出错

字符类型：var a byte    字符用‘’

字符串表示两种方式： 1）“”双引号    2）``（反引号） 原生字符串

https://go-zh.org/pkg/     // 官网package

打印占位符
	%v	相应值的默认格式。在打印结构体时，“加号”标记（%+v）会添加字段名
	%T	相应值的类型的Go语法表示
	%q	单引号围绕的字符字面值，由Go语法安全地转义  
		fmt.Printf("%q", "test")   // 输出："test"
	
str := fmt.Sprintf("a=%d", a)

len()  // 时间复杂度O(1)，字符串的长度默认是存起来的，C是要找到‘\0’

浏览器敲网址到看到页面的全过程  讲师的理解



# go day 3 ******************************************

fmt.Println(now.Format("2006/01/02 15:04:05"))


函数也是一种类型


一个函数可以赋值给变量


命名返回值的名字


defer


# go day 4 ******************************************

rune数据类型  
	//int32的别名，几乎在所有方面等同于int32
	//它用来区分字符值和整数值
  	







































 

